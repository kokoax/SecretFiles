if &compatible
  set nocompatible
endif
set runtimepath+=~/.vim/dein/repos/github.com/Shougo/dein.vim


call dein#begin(expand('~/.vim/dein' ))

"NeoBundleでNeoBundle自身をプラグインとして管理している
" call dein#add( 'Shougo/neobundle.vim' )
call dein#add( 'Shougo/dein.vim' )

call dein#add( 'Shougo/vimproc', {'build': 'make'} )
call dein#add( 'VimClojure' )
call dein#add( 'Shougo/vimshell' )
"call dein#add( 'Shougo/neosnippet' )
call dein#add( 'jpalardy/vim-slime' )
" プログラムを保存するたびに解析してエラーやワーニングをハイライトしてくれる(静的解析)
call dein#add( 'scrooloose/syntastic' )
" rubyの静的解析の設定(rubocop)
let g:synctastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['ruby'] }
let g:synctastic_ruby_checkers = ['rubocop']

" 構文の終わりを自動で補完
" call dein#add( 'kana/vim-smartinput' )
" call dein#add( 'cohama/vim-smartinput-endwise' )
call dein#add( 'tpope/vim-endwise' )

" call smartinput_endwise#define_default_rules()

"MarkDownプラグイン
call dein#add( 'plasticboy/vim-markdown' )
call dein#add( 'kannokanno/previm' )
call dein#add( 'tyru/open-browser.vim' )
autocmd BufRead,BufNewFile *.md set filetype=markdown
"let g:previm_open_cmd = 'open -a Firefox'

"ファイルをtree的に表示してくれる
call dein#add( 'scrooloose/nerdtree' )
nnoremap T :NERDTree<CR>

"インデントの深さを可視化
call dein#add( 'nathanaelkane/vim-indent-guides' )
let g:indent_guides_enable_on_vim_startup = 1

"行末の半角スペースを可視化
call dein#add( 'bronson/vim-trailing-whitespace' )

"括弧を自動補完してくれる
"   なんか括弧前にスペース入れると閉じる方の括弧を消してくれない
"call dein#add( 'Townk/vim-autoclose'

call dein#add( 'Shougo/unite.vim' )
"insertModeで開始する
let g:unite_enable_start_insert=1
"bufferList
noremap <C-P> :Unite buffer<CR>
"FileList
noremap <C-N> :Unite -buffer-name=file file<CR>
"最近使ったファイルの一覧
noremap <C-Z> :Unite file_mru<CR>
" sourcesを「今開いているファイルのディレクトリ」とする
noremap :uff :<C-u>UniteWithBufferDir file -buffer-name=file<CR>
" ウィンドウを分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
au FileType unite inoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
" ウィンドウを縦に分割して開く
au FileType unite nnoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
au FileType unite inoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
" ESCキーを2回押すと終了する
au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

call dein#add( 'Shougo/neomru.vim' )

call dein#add( 'mattn/emmet-vim' )
let g:user_emmet_leader_key = '<C-y>'

"htmlのオートインデントを行うプラグイン
let g:html_indent_inctags = 'html,body,head,tbody'

"特定のファイルを開いた時にテンプレートを差し込む
call dein#add( 'thinca/vim-template' )

"<+FILE_NAME+>にファイル名を挿入する。
"<+DATE+>に日付を挿入する。
autocmd User plugin-template-loaded call s:template_keywords()
function! s:template_keywords()
  silent! %s/<+FILE_NAME+>/\=expand('%:r')/g
  silent! %s/<+FULL_NAME+>/\=expand('%:t')/g
  silent! %s/<+DATE+>/\=strftime('%Y-%m-%d')/g
endfunction

"<+CURSOR+>にカーソルを移動する。
autocmd User plugin-template-loaded
      \     if search('<+CURSOR+>')
      \	|		silent! execute 'normal! "_da>'
      \	|	endif

" EditorConfig 異なるEditor間で設定を共有する?
" .editorconfigファイルに則ってインデントの深さとかを設定してくれる.
" したがって設定を共有出来る.
"call dein#add( 'editorconfig/editorconfig-vim' )

" CoffeeScriptのハイライトをするプラグイン
call dein#add( 'kchmck/vim-coffee-script' )

"color scheme Vimの色分けとか背景色とかのやつ
call dein#add( 'tomasr/molokai' )
call dein#add( 'nanotech/jellybeans.vim' )
call dein#add( 'w0ng/vim-hybrid' )

" ドキュメント参照
call dein#add( 'thinca/vim-ref' )
call dein#add( 'yuku-t/vim-ref-ri' )

"どのcolorschemeでも背景透過できるようにする.
call dein#add( 'miyakogi/seiya.vim' )
let g:seiya_auto_enable = !has( 'gui_running' )

" ステータスバーをグラフィカルに
call dein#add( 'itchyny/lightline.vim' )
set laststatus=2 " ステータスラインを常に表示
set showmode " 現在のモードを表示
set showcmd " 打ったコマンドをステータスラインの下に表示
set ruler " ステータスラインの右側にカーソルの現在位置を表示する

" call dein#install()
call dein#end()

if has( 'mac' )
  colorscheme hybrid
  "colorscheme molokai
  "colorscheme jellybeans

elseif has( 'unix' )
  "colorscheme hybrid
  "colorscheme molokai
  colorscheme jellybeans

endif


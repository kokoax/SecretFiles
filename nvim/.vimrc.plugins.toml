# Shougo's plugins
[[plugins]]
repo = 'Shougo/dein.vim'
[[plugins]]
repo = 'Shougo/deoplete.nvim'
[[plugins]]
repo = 'Shougo/vimproc'
[[plugins]]
repo = 'Shougo/neomru.vim'
[[plugins]]
repo = 'Shougo/unite.vim'
[[plugins]]
repo = 'Shougo/vimshell'
hook_add = '''
  nnoremap <silent> ,is :VimShell<CR>
'''
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  call denite#custom#map('insert', '<C-j>', 'move_to_next_line')
  call denite#custom#map('insert', '<C-k>', 'move_to_prev_line')

  call denite#custom#var('file_rec', 'command',
        \ ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
  call denite#custom#var('grep', 'command',
        \ ['pt', '--nogroup', '--nocolor', '--smart-case', '--hidden'])
  call denite#custom#var('grep', 'default_opts', [])
  call denite#custom#var('grep', 'recursive_opts', [])

  "FileList
  noremap <C-N> :Unite -buffer-name=file file<CR>
  "最近使ったファイルの一覧
  noremap <C-Z> :Unite file_mru<CR>
  " sourcesを「今開いているファイルのディレクトリ」とする
  noremap :uff :<C-u>UniteWithBufferDir file -buffer-name=file<CR>
  " ウィンドウを分割して開く
  au FileType unite nnoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
  au FileType unite inoremap <silent> <buffer> <expr> <C-J> unite#do_action('split')
  " ウィンドウを縦に分割して開く
  au FileType unite nnoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
  au FileType unite inoremap <silent> <buffer> <expr> <C-K> unite#do_action('vsplit')
  " ESCキーを2回押すと終了する
  au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
  au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
'''


[[plugins]] # Insert of template
repo = 'mattn/sonictemplate-vim'
hook_add = '''
  let g:sonictemplate_vim_template_dir = [
        \ '~/.vim/template'
        \]
'''


[[plugins]] # Program transport plugin
repo = 'jpalardy/vim-slime'

[[plugins]] # Static syntax checker plugin any language
repo = 'scrooloose/syntastic'
# rubyの静的解析の設定(rubocop)
hook_add = '''
  let g:synctastic_mode_map = { 'mode': 'passive', 'active_filetypes': ['ruby'] }
  let g:synctastic_ruby_checkers = ['rubocop']
'''

[[plugins]] # end completion
repo = 'tpope/vim-endwise'

# [[plugins]] # parentheses completion
# repo = 'kana/vim-smartinput'

# [[plugins]] # parentheses completion
# repo = 'Townk/vim-autoclose'

# MarkDownプラグイン
# let g:previm_open_cmd = 'open -a Firefox'

# Markdown plugins
[[plugins]]
repo = 'plasticboy/vim-markdown'
[[plugins]] # PrevimOpen
repo = 'kannokanno/previm'
[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
  autocmd BufRead,BufNewFile *.md set filetype=markdown
'''

[[plugins]] # Tree view plugin
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap T :NERDTree<CR>
'''

[[plugins]] # Indent visualizer plugin
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]] # Harf space visualizer plugin
repo = 'bronson/vim-trailing-whitespace'


[[plugins]] # Emmet
repo = 'mattn/emmet-vim'
hook_add = '''
  let g:user_emmet_leader_key = '<C-y>'
'''

# Elixir's plugin
[[plugins]]
repo = 'elixir-lang/vim-elixir'

# Clojure's plugin
[[plugins]]
repo = 'vim-scripts/VimClojure'

# CoffeeScript's plugin
[[plugins]]
repo = 'kchmck/vim-coffee-script'

# LaTex's plugins
[[plugins]]
repo = 'lervag/vimtex'
hook_add = '''
  let g:vimtex_latexmk_continuous = 1  " a + preview
  let g:vimtex_latexmk_background = 1  " なにか
  let g:vimtex_latexmk_options = '-pdfdvi'
  let g:vimtex_view_general_viewer = 'evince'
'''
[[plugins]]
repo = 'thinca/vim-quickrun'

# Haskell's plugins
[[plugins]]
repo = 'eagletmt/ghcmod-vim'
hook_add = '''
  autocmd BufWritePost *.hs GhcModCheckAsync " It works when saveing
'''
[[plugins]]
repo = 'dag/vim2hs'

# Golang's plugins
[[plugins]]
repo = 'fatih/vim-go'
hook_add = '''
  autocmd BufNewFile,BufRead *.go nnoremap <silent> =G :GoFmt<CR>
'''

# Rust's plugins
[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config['syntax/rust'] = {
              \   'command' : 'rustc',
              \   'cmdopt' : '-Zparse-only',
              \   'exec' : '%c %o %s:p',
              \   'outputter' : 'quickfix',
              \ }
'''

# Crystal's plugins
[[plugins]]
repo = 'rhysd/vim-crystal'

# Lisp's plugins
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
  let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
'''

# Color Scheme
[[plugins]]
repo = 'tomasr/molokai'
[[plugins]]
repo = 'nanotech/jellybeans.vim'
[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]] # Document reference plugins
repo = 'thinca/vim-ref'
[[plugins]]
repo = 'yuku-t/vim-ref-ri'

[[plugins]] # Touka plugin
repo = 'miyakogi/seiya.vim'
hook_add = '''
  let g:seiya_auto_enable = !has( 'gui_running' )
'''

[[plugins]] # Status bar to graphical
repo = 'itchyny/lightline.vim'
hook_add = '''
  set laststatus=2 " ステータスラインを常に表示
  set showmode " 現在のモードを表示
  set showcmd " 打ったコマンドをステータスラインの下に表示
  set ruler " ステータスラインの右側にカーソルの現在位置を表示する
'''

